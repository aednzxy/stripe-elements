{
  "version": 3,
  "sources": ["../src/lib/read-only.ts"],
  "sourcesContent": ["import type { ReactiveController, ReactiveElement, ReactiveControllerHost } from 'lit';\n\nfunction isReactiveElement(host: ReactiveControllerHost): host is ReactiveElement {\n  return 'addInitializer' in host.constructor;\n}\n\nclass ReadOnlyController implements ReactiveController {\n  private static instances = new Map<ReactiveControllerHost, ReadOnlyController>();\n\n  static for(host: ReactiveControllerHost) {\n    return new ReadOnlyController(host);\n  }\n\n  values = new Map();\n\n  hostConnected() { null; }\n\n  constructor(private host: ReactiveControllerHost) {\n    if (ReadOnlyController.instances.has(host))\n      return ReadOnlyController.instances.get(host);\n    host.addController(this);\n    ReadOnlyController.instances.set(host, this);\n  }\n\n  set(key: string, value: unknown) {\n    const old = this.values.get(key);\n    this.values.set(key, value);\n    if (isReactiveElement(this.host))\n      this.host.requestUpdate(key, old);\n    else\n      this.host.requestUpdate();\n  }\n}\n\n\nexport function readonly<T extends ReactiveElement>(proto: T, key: string) {\n  const Klass = (proto.constructor as typeof ReactiveElement);\n  Klass.addInitializer(x => {\n    const controller = ReadOnlyController.for(x);\n\n    // controller.values.set(key, x[key]);\n\n    Object.defineProperty(x.constructor.prototype, key, {\n      enumerable: true,\n      configurable: true,\n      get() {\n        return controller.values.get(key);\n      },\n\n      /** allow for class field initialization */\n      set(value) {\n        if (!controller.values.has(key))\n          controller.values.set(key, value);\n      },\n    });\n\n    Klass.createProperty(key, {\n      // @ts-expect-error: https://github.com/lit/lit/pull/1963\n      ...Klass.getPropertyOptions(key),\n      noAccessor: true,\n    });\n  });\n}\n\nreadonly.set = function<T extends ReactiveControllerHost>(host: T, props: Partial<T>) {\n  const controller = ReadOnlyController.for(host);\n  for (const [key, value] of Object.entries(props))\n    controller.set(key, value);\n};\n"],
  "mappings": ";AAEA,2BAA2B,MAAuD;AAChF,SAAO,oBAAoB,KAAK;AAAA;AAGlC,gCAAuD;AAAA,EAWrD,YAAoB,MAA8B;AAA9B;AAJpB,kBAAS,oBAAI;AAKX,QAAI,oBAAmB,UAAU,IAAI;AACnC,aAAO,oBAAmB,UAAU,IAAI;AAC1C,SAAK,cAAc;AACnB,wBAAmB,UAAU,IAAI,MAAM;AAAA;AAAA,SAZlC,IAAI,MAA8B;AACvC,WAAO,IAAI,oBAAmB;AAAA;AAAA,EAKhC,gBAAgB;AAAE;AAAA;AAAA,EASlB,IAAI,KAAa,OAAgB;AAC/B,UAAM,MAAM,KAAK,OAAO,IAAI;AAC5B,SAAK,OAAO,IAAI,KAAK;AACrB,QAAI,kBAAkB,KAAK;AACzB,WAAK,KAAK,cAAc,KAAK;AAAA;AAE7B,WAAK,KAAK;AAAA;AAAA;AAxBhB;AACiB,AADjB,mBACiB,YAAY,oBAAI;AA4B1B,kBAA6C,OAAU,KAAa;AACzE,QAAM,QAAS,MAAM;AACrB,QAAM,eAAe,OAAK;AACxB,UAAM,aAAa,mBAAmB,IAAI;AAI1C,WAAO,eAAe,EAAE,YAAY,WAAW,KAAK;AAAA,MAClD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,MAAM;AACJ,eAAO,WAAW,OAAO,IAAI;AAAA;AAAA,MAI/B,IAAI,OAAO;AACT,YAAI,CAAC,WAAW,OAAO,IAAI;AACzB,qBAAW,OAAO,IAAI,KAAK;AAAA;AAAA;AAIjC,UAAM,eAAe,KAAK;AAAA,SAErB,MAAM,mBAAmB;AAAA,MAC5B,YAAY;AAAA;AAAA;AAAA;AAKlB,SAAS,MAAM,SAA2C,MAAS,OAAmB;AACpF,QAAM,aAAa,mBAAmB,IAAI;AAC1C,aAAW,CAAC,KAAK,UAAU,OAAO,QAAQ;AACxC,eAAW,IAAI,KAAK;AAAA;",
  "names": []
}
